SPOILERS!!!!

Eliza is a space based trading game that has a very simple bug.

There are 16 item types in the game of eliza each with 3 different modifiers that makes a total of 48 item types (really there are 45 item types as fuel does not have a modifier).  Anyways... I digress.

The bug is the fact that you the hold of your ship supports 30 such items.  It is possible to purchase more items in the game (by finding them) and overflow your ships hold.

This will cause an overflow to overwrite the comfuncs structure, which is, a structure of pointers to the command handler routines of the interface.

It is possible to overflow the lower 16-bits of the comfuncs function pointers with the amount of a particular item you have in your hold.

BUT:  There is a catch.  ASLR is enabled.  You actually cannot control the high order 4-bits of the ASLR'ed pointer address.  So you need to connect and play the game on average 8 times inorder to successfully collide with the ASLR'ed memory location.

Now you need to jump somewhere... where is your buffer?  Ah yes your command buffer is on the stack.

If you point the lower 16 bits (and do so with the assumption that the upper 4 bits is 0) to display_prompt you will leak (when you call the now overwritten function pointer) an address to the stack as a 32-bit decimal (this will be displayed as your cash as a negative number since the stack is 0xB....)

Now you can execute the command handler (remember to execute it by the item name of the 31st item in your hold) and so in begins the exploit...

Next you need to reoverwrite again... this time you have some very important information... you know what the overwrite amount needs to be... because you have successfully guessed the 4-bits of high to cause the pointer to jump anywhere in the code space... you still don't know the upper 16-bits however.

